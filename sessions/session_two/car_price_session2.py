# -*- coding: utf-8 -*-
"""car_price_session2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1StebK_YRp3xeqB-XXJTtDpvcAgFd477Z
"""

import pandas as pd

"""# Import dataset"""

df = pd.read_csv('CarPrice_Assignment.csv')

df.head(25) # prints n first rows 5 by default

df['fueltype'].value_counts()

df.join(pd.get_dummies(df['fueltype'], drop_first=True, prefix='fueltype')).drop(columns= 'fueltype')

def one_hot_encode (df, col_names):
  new_df = df
  for col in col_names:
    new_df = new_df.join(pd.get_dummies(df[col], drop_first=True, prefix=col)).drop(columns= col)
  return new_df

object_columns = df.select_dtypes(include=['object']).columns.tolist()
object_columns.remove('CarName')

df_numeric = one_hot_encode(df, object_columns)

df_numeric.dtypes

df['CarName'].value_counts()

df['CarBrand'] = df['CarName'].apply(lambda x: x.split()[0])

df['CarBrand'].value_counts()



df.info() #summary of the dataset

df.isnull().sum() #check if there are null values on rows

df.describe()

import matplotlib.pyplot as plt
import seaborn as sns

sns.pairplot(data=df)

sns.pairplot(data=df[['wheelbase', 'carlength', 'carwidth', 'price']], hue='price')

fig, axes = plt.subplots(1,1, figsize=(15, 5))
sns.boxplot(data=df, x='enginelocation', y='price', ax=axes)

fig, axes = plt.subplots(1,1, figsize=(15, 5))
sns.scatterplot(data=df, x='wheelbase', y='price', ax=axes)

df.columns # list of columns

df.dtypes

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
df.select_dtypes(include=numerics)

numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']
numCols = df.select_dtypes(include=numerics).columns

df[numCols].corr() #correlation between numeric vars

plt.figure(figsize=(10,10))
sns.heatmap(df[numCols].corr(), annot=True, cmap='Blues')
plt.title('Correlation')
plt.ylabel('rows')
plt.xlabel('columns')

df.price.value_counts()

df.hist('price', bins=25)

from sklearn.model_selection import train_test_split

X = df_numeric.drop(columns = 'price')
y = df_numeric['price']

X_train, y_train, X_test, y_test = train_test_split(X, y, test_size=0.3)

X.shape

X_train.shape